# Copyright 2007-2011 The Hyperspy developers
#
# This file is part of  Hyperspy.
#
#  Hyperspy is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
#  Hyperspy is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with  Hyperspy.  If not, see <http://www.gnu.org/licenses/>.


import numpy as np

from nose.tools import assert_true, assert_equal, assert_not_equal
from hyperspy.signals.eels_spectrum_simulation import EELSSpectrumSimulation 

class Test_Estimate_Elastic_Scattering_Threshold_Single:
    def setUp(self):
        self.bg = 10
        size = 100
        s = EELSSpectrumSimulation({'data' : np.zeros(size)})
        s.axes_manager.signal_axes[0].scale = 0.5
        s.axes_manager.signal_axes[0].offset = -10
        axis = s.axes_manager[0]
        s.data[axis.value2index(0)] = 100
        s.data[axis.value2index(self.bg):] = np.arange(
                                1, size - axis.value2index(self.bg) + 1)
        s.data = s.data + 0.1
        s.add_poissonian_noise()
        self.signal = s
        
        
    def test_min_in_window(self):
        s = self.signal
        assert_equal(
            s.estimate_elastic_scattering_threshold(window=15), self.bg)
            
    def test_min_not_in_window(self):
        s = self.signal
        assert_equal(
            s.estimate_elastic_scattering_threshold(window=8),
            8)
    
    def test_little_bumps(self):    
        s = self.signal
        Eax = s.axes_manager.signal_axes[0]
        s.data[Eax.value2index(5)] = 5
        assert_equal(
            s.estimate_elastic_scattering_threshold(window=15), 
            9.5)

class Test_Estimate_Elastic_Scattering_Threshold_Line:
    def setUp(self):
        channels = 256
        size = 25
        
        s = EELSSpectrumSimulation({'data' : np.zeros((size,channels))})
        s.axes_manager.signal_axes[0].scale = 0.5
        s.axes_manager.signal_axes[0].offset = -10
        
        # ZLP
        axis = s.axes_manager.signal_axes[0]
        izlp = axis.value2index(0)
        s.data[:,izlp] = 10000
        
        # BGE
        self.ibg = (8-12) * np.random.random(25) + 12
        for spc in s:
            spc.data[axis.value2index(self.ibg[i]):] = np.arange(
                        1, channels - axis.value2index(self.ibg[i]) + 1)
        s.data = s.data + 0.1
        s.add_poissonian_noise()
        self.signal = s

class Test_Estimate_Elastic_Scattering_Threshold_Image:
    def setUp(self):
        channels = 256
        size = 25

        s = signals.EELSSpectrumSimulation(
                {'data' : np.zeros((size,size,channels))})
        s.axes_manager.signal_axes[0].scale = 0.5
        s.axes_manager.signal_axes[0].offset = -10

        # ZLP
        axis = s.axes_manager.signal_axes[0]
        izlp = axis.value2index(0)
        s.data[...,izlp] = 10000

        # BGE
        self.ibg = (8-12) * np.random.random((size,size)) + 12
        for spc in s:
            spc.data[axis.value2index(
                self.ibg[self.axes_manager.coordinates]):] = \
                np.arange(1, channels - 
                axis.value2index(self.ibg[s.axes_manager.coordinates]) + 1)
        s.data = s.data + 0.1
        s.add_poissonian_noise()
        self.signal = s
